<개요>
쟝고 초기 셋팅시에 환경 변수를 불러오지 못하는 이슈가 발생.

여러가지 테스트 코드를 추가하여 테스트하는데 관련 문서를 찾아보는 중,
python-dotenv보다 Django에서는 django-environ이 더 효율적이라는 글을 발견.

Django-environ의 장점
1. 자동 타입 캐스팅
->가장 큰 장점으로 os.getenv()는 모든 값을 문자열로 반환하지만, django-environ은 값을 읽을 때 원하는 타입으로 자동으로 변환해준다.

2. URL파싱
->테이터베이스 URL, 캐시 URL등을 파싱하여 Django 설정 딕셔너리 형식으로 변환해주는 편리한 메서드를 제공(env.db(), env.cache()

3. 필수 값 검사 및 기본값 설정
->환경 변수가 설정되지 않았을 때 기본값을 사용하도록 지정하는 것이 더 명확하고, 특정 변수가 반드시 설정되어야 함을 강제할 수도 있음.

4. Django 설정 통합
->settings.py에서 사용하기에 매우 자연스러운 구조를 제공

5. .env파일 로딩 내장


단점
1. 약간의 초기 설정과 라이브러리 의존성 추가


결론: 어차피 디버깅 하는 과정이 필요한데, 사용한 경험이 없는 방법이라도 숙지할겸 써보자



<과정>
1. 설치
1) 기존 python-dotenv 제거
>>>pip ininstall python-dotenv
2) django-environ 설치
pip install django-environ
pip freeze > requirements.txt

2. settings.py 수정
1) python-dotenv관련 import와 함수 제거
2) django-environ을 설정

# aiuto/settings.py
import environ #추가

BASE_DIR 다음에 코드 추가

# django-environ 설정 시작
env = environ.Env(
    # 기본값 및 타입 설정(예시)
    DEBUG=(bool, False), # Debug 환경 변수를 bool 타입으로 읽고, 없으면 False 사용
    NOTION_API_KEY=(str, ''), # str타입, 없으면 빈 문자열
    NOTION_DATABASE_ID=(str, ''),
)

# .env 파일 읽기
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# 이제 env() 또는 env.bool(), env.str() 등을 사용하여 설정값 읽기
SECRET_KEY = env('SECRET_KEY')
DEBUG = env('DEBUG")
ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=[])

# ... 나머지 설정

# Notion 설정 읽기
NOTION_API_KEY = env('NOTION_API_KEY')
NOTION_DATABASE_ID = env('NOTION_DATABASE_ID')


